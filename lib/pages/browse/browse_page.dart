/// Generated by Flutter GetX Starter on 2022-01-23 03:19ackage:enclave/shared/enclave_appbar.dart';
import 'dart:math';

import 'package:enclave/shared/enclave_dialog.dart';
import 'package:enclave/shared/enclave_drawer.dart';
import 'package:flutter/material.dart';
import 'package:flutter_vibrate/flutter_vibrate.dart';
import 'package:get/get.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:scrollable_positioned_list/scrollable_positioned_list.dart';

import '../../data/constants.dart';
import '../../data/en_enclave.dart';
import '../../data/en_member.dart';
import '../../data/repository.dart';
import '../../enclave_app.dart';
import '../../pages/member/member_page.dart';
import '../../shared/common_ui.dart';
import '../../shared/enclave_avatar.dart';
import '../../shared/enclave_menu.dart';
import '../../shared/enclave_sound.dart';
import '../../shared/enclave_utility.dart';
import '../../shared/image_viewer.dart';
import '../setting/setting_logic.dart';
import 'browse_logic.dart';
import 'browse_state.dart';

class BrowsePage extends StatelessWidget {
  final BrowseLogic logic = Get.put(BrowseLogic());
  final BrowseState state = Get.find<BrowseLogic>().state;

  BrowsePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    logic.contextBrowse = context;

    return WillPopScope(
      onWillPop: () {
        final canPop = Navigator.canPop(context);
        if (!canPop) {
          mainLogic.finishApp(toAsk: true);
        }
        return Future.value(canPop);
      },
      child: Scaffold(
        appBar: AppBar(
          title: InkWell(
            onLongPress: () {
              memberLogic.routeToMemberPage();
            },
            child: Obx(() => Text(logic.rxBrowseTitle.value)),
          ),
          actions: gEnMenu.enclaveActionMenuForMemberPage(context: context, isMemberBrowsePage: true),
        ),
        drawer: enclaveDrawerUser(context),
        onDrawerChanged: (isOpen) {
          if (!memberLogic.finishEditable()) return;
        },
        body: SafeArea(
          child: Obx(() {
            return MemberBrowseHolder(hideEmptyData: gAppSetting.rxPrefHideEmptyData.value);
          }),
        ),
      ),
    );
  }
}

class MemberBrowseHolder extends StatelessWidget {
  const MemberBrowseHolder({
    Key? key,
    required this.hideEmptyData,
  }) : super(key: key);

  final bool hideEmptyData;

//------------------------------------------------------------------------------------
  Widget viewMembersList() {
    final itemScrollController = ItemScrollController();
    final members = browseLogic.members;
    var selectedIndex = members.indexOf(browseLogic.rxSelectedMember.value);
    if (selectedIndex == -1) selectedIndex = 0;

    // scroll to current selected member
    Future.delayed(const Duration(milliseconds: 0), () => {itemScrollController.scrollTo(index: selectedIndex, alignment: 0.5, duration: const Duration(microseconds: 500))});

    return ScrollablePositionedList.builder(
      scrollDirection: Axis.vertical,
      shrinkWrap: true,
      physics: const ScrollPhysics(),
      itemCount: members.length,
      itemScrollController: itemScrollController,
      itemBuilder: (context, index) {
        final member = members[index];
        return memberBrowseItem(member: member);
      },
    );
  }

//------------------------------------------------------------------------------------
  Widget memberBrowseItem({required EnMember member}) {
    final mobilePhone = member.mobilePhone;
    final personName = member.personName;

    //------------------------------------------------------------------------------------
    // make second column from browsable fields
    final thumbs = gCurrentEnclave.browsableFields
        .map((field) => (hideEmptyData && gEnUtil.isDummyDataString(member.findFieldValue(field)))
            ? const SizedBox.shrink()
            : Padding(
                padding: const EdgeInsets.only(top: 2.0, bottom: 2.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    fieldTitleBox(field: field),
                    const SizedBox(
                      width: Constants.cTinyGap,
                    ),
                    Expanded(
                      child: Obx(() {
                        return Text(
                          field.isPhone ? gEnUtil.stringToFormalKoreanLocalPhoneNumberDisplay(member.findFieldValue(field)) : member.findFieldValue(field),
                          style: TextStyle(fontSize: Constants.cMediumFontSize),
                          overflow: TextOverflow.fade,
                        );
                      }),
                    ),
                  ],
                ),
              ))
        .toList();
    //------------------------------------------------------------------------------------

    final _rxPadLeft = Rx<double>(Constants.cSmallGap);
    final _rxPadRight = Rx<double>(Constants.cSmallGap);
    double deltaSum = 0;
    bool activated = false;

    //----------------------------------------------------------
    _backToPadding() {
      _rxPadLeft.value = Constants.cSmallGap;
      _rxPadRight.value = Constants.cSmallGap;
    }

    return GestureDetector(
      onHorizontalDragEnd: (details) {
        if (!activated) {
          _backToPadding();
        }
      },
      onLongPress: () {
        memberLogic.routeToMemberPage(selectedMember: member);
      },
      onHorizontalDragUpdate: (details) {
        final delta = details.delta.dx;
        if (delta > 0) {
          deltaSum += delta / 2;
        }
        final offset = min(deltaSum, Constants.cSmallGap);
        _rxPadLeft.value = Constants.cSmallGap + offset;
        _rxPadRight.value = Constants.cSmallGap - offset;
        if (deltaSum >= 0) {
          activated = offset == Constants.cSmallGap;
        }
        if (activated) {
          if (gAppSetting.canVibrate) {
            Vibrate.feedback(FeedbackType.selection);
          }
          gEnSound.playAudio(AudioKind.forwardSelection);
          memberLogic.routeToMemberPage(selectedMember: member);
        }
      },
      child: Obx(() {
        return Padding(
          padding: EdgeInsets.only(left: _rxPadLeft.value, right: _rxPadRight.value),
          child: Card(
            child: Padding(
              padding: const EdgeInsets.all(Constants.cTinyGap),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.start,
                mainAxisSize: MainAxisSize.max,
                children: [
                  Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      InkWell(
                        onTap: () async {
                          await Get.to(() => ProfileImageViewer(member: member));
                        },
                        child: EnclaveAvatar(
                          decoration: const BoxDecoration(color: Colors.white, shape: BoxShape.circle),
                          image: member.profileImage ?? EnclaveRepository.getAssetImageProfile,
                          size: Constants.cMediumAvatarSize,
                          statusColor: (member.getIndex == browseLogic.rxSelectedMember.value.getIndex) ? Theme.of(browseLogic.contextBrowse).colorScheme.secondary : null,
                          statusAngle: 270.0,
                        ),
                      ),
                      const SizedBox(height: Constants.cTinyGap),
                      SizedBox(
                        width: Constants.cMediumAvatarSize,
                        child: Text(
                          member.personName,
                          textAlign: TextAlign.center,
                          style: TextStyle(fontWeight: FontWeight.w700, fontSize: Constants.cMediumFontSize),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(width: Constants.cSmallGap),
                  Flexible(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.start,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: thumbs,
                    ),
                  ),
                  if ((member != gCurrentEnclave.mySelf) && !gEnUtil.isDummyDataString(member.mobilePhone))
                    Column(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        IconButton(
                            icon: const Icon(MdiIcons.phoneOutgoingOutline, color: Colors.blueGrey),
                            highlightColor: Colors.green[200],
                            iconSize: Constants.cMediumIconSize,
                            padding: EdgeInsets.zero,
                            constraints: const BoxConstraints(),
                            onPressed: () async {
                              await gEnDialog.callPhone(mobilePhone, personName);
                            }),
                        const SizedBox(height: Constants.cMediumGap),
                        IconButton(
                            icon: const Icon(MdiIcons.phoneMessageOutline, color: Colors.blueGrey),
                            highlightColor: Colors.green[200],
                            iconSize: Constants.cMediumIconSize,
                            padding: EdgeInsets.zero,
                            constraints: const BoxConstraints(),
                            onPressed: () async {
                              await gEnDialog.sendSms([mobilePhone], personName);
                            }),
                      ],
                    ),
                ],
              ),
            ),
          ),
        );
      }),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Theme.of(context).colorScheme.background,
      child: Column(
        children: [
          Expanded(
            child: FutureBuilder(
              future: browseLogic.initBrowsePageAsync(),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return Center(child: Text('errorMemberInitialization'.tr + '\n' + snapshot.error.toString()));
                }

                // initBrowsePageAsync Success
                if (snapshot.connectionState == ConnectionState.done) {
                  return viewMembersList();
                }

                // Waiting
                return Center(
                  heightFactor: 3.0,
                  child: viewWaiting(context, notice: 'noticeUpdatingEnclaveData'.tr),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
