/// Generated by Flutter GetX Starter on 2022-02-18 23:12
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:enclave/data/en_bulletin_message.dart';
import 'package:enclave/data/en_comment.dart';
import 'package:enclave/data/en_enclave.dart';
import 'package:enclave/data/repository.dart';
import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';

import '../../enclave_app.dart';
import 'bulletin_state.dart';

class BulletinLogic extends GetxController {
  final state = BulletinState();
  late BuildContext contextBulletin;

  static String imageCode_ = '>Image<';
  static String fileCode_ = '>File<';
  List<String> textImageList = [];

  bool? isNotice;
  EnBulletinMessage? message;

  bool get _isNotice => isNotice ?? message!.isNotice;

  bool get _isNew => message == null;

  late Stream<QuerySnapshot> noticeStream;
  late Stream<QuerySnapshot> messageStream;
  bool streamInitialized = false;

  String titleText = '';
  List<String> content = [];

  final _rxIsMessageChanged = Rx<bool>(false);

  int commentCount = 0;

  bool get isMessageChanged => _rxIsMessageChanged.value;

  @override
  void onInit() {
    // TODO: implement onInit
    super.onInit();
  }

  @override
  void onReady() {
    // TODO: implement onReady
    super.onReady();
  }

  @override
  void onClose() {
    // TODO: implement onClose
    super.onClose();
  }

  void assignBulletinMessage({EnBulletinMessage? message, bool? isNotice}) {
    assert(((message == null) && (isNotice != null)) || ((message != null) && (isNotice == null)));

    this.isNotice = isNotice;
    this.message = message;

    titleText = (message == null) ? '' : message.title;
    content = (message == null) ? [] : message.content;

    _rxIsMessageChanged.value = false;
  }

  void initBulletinStreams() {
    if (streamInitialized) return;
    streamInitialized = true;

    noticeStream = gEnRepo.getBulletinNoticeStream();
    messageStream = gEnRepo.getBulletinMessageStream();
  }

  void releaseBulletinStreams() {
    if (!streamInitialized) return;
    streamInitialized = false;
  }

  Future<void> saveMessage() async {
    final mySelf = gCurrentEnclave.mySelf;
    final now = DateTime.now().millisecondsSinceEpoch;

    if (_isNew) {
      final newMessage = EnBulletinMessage(
        uuid: mainLogic.uuidGen.v4().toString(),
        title: titleText.trim(),
        content: content,
        generated: now,
        modified: now,
        personName: mySelf.personName,
        personId: mySelf.getIndex,
        readCount: 0,
        isNotice: _isNotice,
      );
      await gEnRepo.saveBulletinMessage(newMessage);
    } else {
      final oldMessage = message!;
      oldMessage.title = titleText.trim();
      oldMessage.content = content;
      oldMessage.modified = now;
      await gEnRepo.saveBulletinMessage(oldMessage);
    }

    _reset();
  }

  void _reset() {
    titleText = '';
    content = [];
    _rxIsMessageChanged.value = false;

    isNotice = null;
    message = null;
  }

  void onChangedTitle(String? text) {
    titleText = text ?? '';
    updateChanged();
  }

  void updateChanged() {
    if (titleText.trim().isEmpty && content.isEmpty) {
      _rxIsMessageChanged.value = false; // nothing to be changed
      return;
    }

    if (_isNew) {
      _rxIsMessageChanged.value = titleText.trim().isNotEmpty || content.isNotEmpty;
      return;
    }

    _rxIsMessageChanged.value = (titleText.trim() != message!.title.trim()) || (content != message!.content);
  }

  bool ownsMessage() {
    // owns new message
    if (_isNew) return true;

    // owns message was generated by mySelf
    final mySelf = gCurrentEnclave.mySelf;
    return ((message!.personName == mySelf.personName) && (message!.personId == mySelf.getIndex));
  }

  Future<void> addComment({required String commentText, FileImage? fileImage}) async {
    // no comment on new Message
    if (_isNew) return;

    await gEnRepo.addComment(message: message!, commentText: commentText, fileImage: fileImage);
  }

  Stream<QuerySnapshot<Object?>> getCommentStream(EnBulletinMessage message) {
    return gEnRepo.getBulletinCommentStream(message);
  }

  void deleteComment({required EnBulletinMessage message, required EnComment comment}) {
    return gEnRepo.deleteComment(message: message, comment: comment);
  }

  List<String>? textImages;

  void assignTextImages({List<String>? textImages}) {
    this.textImages = textImages;
  }

  bool isImage(String item) => item.startsWith(imageCode_);

  /// check if imageCode_
  bool isImage_(String item) => item.startsWith(imageCode_);

  /// imageCode_ should be removed, then return image text
  String getImage_(String item) {
    assert(isImage_(item));
    return item.substring(imageCode_.length);
  }

  /// check if fileCode_
  bool isFile_(String item) => item.startsWith(fileCode_);

  /// fileCode_ should be removed, then return imageUrl text
  String getImageUrl_(String item) {
    assert(isFile_(item));
    return item.substring(fileCode_.length);
  }
}
