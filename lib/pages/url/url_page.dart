/// Generated by Flutter GetX Starter on 2022-01-01 00:44
import 'package:enclave/data/en_enclave.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import '../../data/constants.dart';
import '../../data/en_url.dart';
import '../../enclave_app.dart';
import '../../shared/common_ui.dart';
import '../../shared/enclave_menu.dart';
import 'url_logic.dart';
import 'url_state.dart';

class UrlPage extends StatelessWidget {
  final UrlLogic logic = Get.find<UrlLogic>();
  final UrlState state = Get.find<UrlLogic>().state;

  UrlPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Instantiate your class using Get.put() to make it available for all "child" routes there.
    return Scaffold(
      appBar: AppBar(
        title: Text('titleUrlPage'.tr),
        actions: gEnMenu.actionsDefault(),
      ),
      body: SafeArea(
        child: FutureBuilder(
          future: urlLogic.initUrlPageAsync(), // initialize app parameters
          builder: (context, snapshot) {
            // Check for errors
            if (snapshot.hasError) {
              return Center(child: Text('errorUrlInitialization'.tr + '\n' + snapshot.error.toString()));
            }

            // Once complete
            if (snapshot.connectionState == ConnectionState.done) {
              return const UrlView();
            }

            // Otherwise, show something whilst waiting for initialization to complete
            return Center(child: viewWaitingSplash(context));
          },
        ),
      ),
    );
  }
}

class UrlView extends StatefulWidget {
  const UrlView({Key? key}) : super(key: key);

  @override
  _UrlViewState createState() => _UrlViewState();
}

class _UrlViewState extends State<UrlView> {
  final urls = gCurrentEnclave.urls;

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
        child: ListView.builder(
      scrollDirection: Axis.vertical,
      shrinkWrap: true,
      physics: const ScrollPhysics(),
      padding: const EdgeInsets.all(Constants.cMediumGap),
      itemCount: urls.length,
      itemBuilder: (BuildContext context, int index) {
        return itemUrl(urls[index]);
      },
    ));
  }

  Widget itemUrl(EnUrl url) {
    return Column(children: [
      Row(children: [
        Text(url.title),
        Text(url.description),
      ]),
      Text(url.address),
    ]);
  }
}
